name: Docker Image Cleanup

on:
  schedule:
    # Runs once every 2 weeks, on Sunday at midnight UTC
    - cron: '0 0 1,15 * *'
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Docker for Docker Hub login
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Cleanup images for user-service
    - name: Cleanup user-service Docker tags
      id: cleanup_user_service
      run: |
        # Set repository and threshold for user-service
        REPO_NAME="serfanrud/user-service"  # Replace with your Docker Hub repository name
        THRESHOLD=3
        TAGS_URL="https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/"
        
        # Get the list of tags from Docker Hub API
        response=$(curl -s $TAGS_URL)
        
        # Extract tags and count them
        tag_count=$(echo $response | jq '.results | length')

        # Set output based on the number of tags
        echo "user_service_tag_count=$tag_count" >> $GITHUB_ENV
        echo "user_service_tags=$response" >> $GITHUB_ENV

    # Cleanup images for auth-service
    - name: Cleanup auth-service Docker tags
      id: cleanup_auth_service
      run: |
        # Set repository and threshold for auth-service
        REPO_NAME="serfanrud/auth-service"  # Replace with your Docker Hub repository name
        THRESHOLD=3
        TAGS_URL="https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/"
        
        # Get the list of tags from Docker Hub API
        response=$(curl -s $TAGS_URL)
        
        # Extract tags and count them
        tag_count=$(echo $response | jq '.results | length')

        # Set output based on the number of tags
        echo "auth_service_tag_count=$tag_count" >> $GITHUB_ENV
        echo "auth_service_tags=$response" >> $GITHUB_ENV

    # Delete old tags for user-service if more than 3 tags exist
    - name: Delete old tags for user-service if more than 3
      if: env.user_service_tag_count > '3'
      run: |
        REPO_NAME="serfanrud/user-service"  # Replace with your Docker Hub repository name
        tags=$(echo ${{ env.user_service_tags }} | jq -r '.results | .[] | .name')
        
        # Sort tags and pick the ones to delete (oldest ones first)
        tags_to_delete=$(echo "$tags" | head -n -$THRESHOLD)

        for tag in $tags_to_delete; do
          echo "Deleting user-service tag: $tag"
          curl -s -X DELETE -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} "https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/${tag}/"
        done

    # Delete old tags for auth-service if more than 3 tags exist
    - name: Delete old tags for auth-service if more than 3
      if: env.auth_service_tag_count > '3'
      run: |
        REPO_NAME="serfanrud/auth-service"  # Replace with your Docker Hub repository name
        tags=$(echo ${{ env.auth_service_tags }} | jq -r '.results | .[] | .name')
        
        # Sort tags and pick the ones to delete (oldest ones first)
        tags_to_delete=$(echo "$tags" | head -n -$THRESHOLD)

        for tag in $tags_to_delete; do
          echo "Deleting auth-service tag: $tag"
          curl -s -X DELETE -u ${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }} "https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/${tag}/"
        done
